# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GRXvwdzr4zXCvUXoG2d7H-L3nK_iSge7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow 
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Layer,Dense,Dropout

data=pd.read_csv("thyroidDF.csv")

data.head()

data.shape

data.isnull().sum()

data.drop(['TSH_measured','T3_measured','TT4_measured','T4U_measured','TBG_measured','referral_source','patient_id'])

#remapping target valueas ton diagnostic group
dignoses={'A':'hypothyroid conditions',
	  'B':'hypothyroid conditions',
	  'C':'hypothyroid conditions',
	  'D':'hypothyroid conditions',
	  'E':'hypothyroid conditions',
	  'F':'hypothyroid conditions',
	  'G':'hypothyroid conditions',
	  'H':'hypothyroid conditions',
	  'I':'binding protein',
	  'J':'binding protein',
	  'K':'binding protein',
	  'L':'replacement therapy',
	  'M':'replacement therapy',
	  'N':'replacement therapy',
	  'O':'antithyroid treatment',
	  'P':'antithyroid treatment',
	  'Q':'antithyroid treatment',
	  'R':'miscellaneous',
	  'S':'miscellaneous',
	  'T':'miscellaneous'}
data['target']=data['target'].map(diagnoses)#remapping

data.dropna(subset=['target'],inplace=True)

data['target'].value_counts()

data[data.age>100]

#splitting the data values as x and y
x=data.iloc[:0:-1]
y=data.iloc[:,-1]

x

y

x['sex'].unique()

x['sex'].replace(np.nan,'F',inplace=True)

x['sex'].value_counts()

#Converting the data type

x['age']=x['age'].astype('float')
x['TSH']=x['TSH'].astype('float')
x['T3']=x['T3'].astype('float')
x['TT4']=x['TT4'].astype('float')
x['T4U']=x['T4U'].astype('float')
x['FTI']=x['FTI'].astype('float') 
x['TBG']=x['TBG'].astype('float')

x.info()

#Encoding the categorical data 
#Encoding the independent (output)
from sklearn.preprocessing import OrdinalEncoder,LabelEncoder
#Categorical data


Ordinal_Encoder=OrdinalEncoder(dtype='int64')
x.iloc[:,1:16]=Ordinal_Encoder.fit_transform(x.iloc[:,1:16])
#Ordinal_Encoder.fit_transform(x[['sex']])

x

x.replace(np.nan,'0',inplace=True)

x

label_encoder=LabelEncoder()
y_dt=label_encoder.fit_transform(y)

y=pd.DataFrame(y_dt, columns=['target'])

y

x=data.iloc[:,0:-1]
y=data.iloc[:,-1]

x

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)

from imblearn.over_sampling import SMOTE
y_train.value_counts()

os=SMOTE(random_state=0,k_neighbors=1)
x_bal,y_bal=os.fit_resample(x_train,y_train)
x_test_bal,y_test_bal=os.fit_resample(x_test,y_test)

from sklearn.preprocessing import StandardScalar
sc=StandardScalar()
x_bal=sc.fit_transform(x_bal)
x_test_bal=sc.transform(x_test_bal)

x_bal

x_test_bal=pd.DataFrame(x_test_bal,columns=columns)

x_bal=pd.DataFrame(x_bal,columns=columns)

x_bal

from sklearn.inspection import permutation_importance
results=permutation_importance(rtf,x_bal,y_bal,scoring='accuracy')